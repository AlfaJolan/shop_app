# app/models/invoice.py
from typing import List, Optional
from datetime import datetime
from decimal import Decimal
from sqlalchemy import DateTime, ForeignKey, Integer, Numeric, String, Boolean, Index
from sqlalchemy.orm import Mapped, mapped_column, relationship
from app.db import Base
# app/routers/invoice.py (–¥–æ–±–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ import)
from urllib.parse import quote

def _content_disposition_utf8(pretty_filename_utf8: str, fallback_ascii: str) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç Content-Disposition —Å ASCII-—Ñ–æ–ª–±—ç–∫–æ–º –∏ UTF-8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –ø–æ RFC 5987.
    –í–ê–ñ–ù–û: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ASCII-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º, –ø–æ—ç—Ç–æ–º—É UTF-8 —á–∞—Å—Ç—å URL-—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º.
    """
    return "attachment; filename=\"{fallback}\"; filename*=UTF-8''{utf8}".format(
        fallback=fallback_ascii.replace('"', ''),
        utf8=quote(pretty_filename_utf8, safe="")
    )

class Invoice(Base):
    __tablename__ = "invoices"

    id: Mapped[int] = mapped_column(primary_key=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, index=True)

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∑–∞–∫–∞–∑—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    #order_id: Mapped[Optional[int]] = mapped_column(Integer, nullable=True, index=True)

    # –ü—É–±–ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω-–¥–æ—Å—Ç—É–ø (–≤ —Å—Å—ã–ª–∫–µ), –º–æ–∂–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–∑—ã–≤–∞—Ç—å
    pkey: Mapped[Optional[str]] = mapped_column(String(128), unique=True, nullable=True)
    is_revoked: Mapped[bool] = mapped_column(Boolean, default=False, index=True)

    # –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    customer_name: Mapped[Optional[str]] = mapped_column(String(120), nullable=True, index=True)
    phone: Mapped[Optional[str]] = mapped_column(String(64), nullable=True)
    comment: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
    seller_name: Mapped[Optional[str]] = mapped_column(String(120), nullable=True, index=True)
    city_name: Mapped[Optional[str]] = mapped_column(String(120), nullable=True, index=True)


    # === –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê ===
    # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'new' | 'packed' | 'shipped' | 'delivered' | 'cancelled'
    status: Mapped[str] = mapped_column(String(24), default="new", index=True)
    status_changed_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    status_note: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)

    # –ò—Ç–æ–≥ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π (—Ñ–∏–Ω–∞–ª)
    total_amount_final: Mapped[Decimal] = mapped_column(Numeric(12, 2), default=0)

    items: Mapped[List["InvoiceItem"]] = relationship(
        "InvoiceItem", back_populates="invoice", cascade="all, delete-orphan"
    )

    # –ê—É–¥–∏—Ç-–∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π
    audits = relationship("InvoiceAudit", back_populates="invoice", cascade="all, delete-orphan")

    # –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥
    def recompute_totals(self):
        self.total_amount_final = sum((x.line_total_final for x in self.items), Decimal("0"))


# –°–æ—Å—Ç–∞–≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π (—Å—Ç—Ä–æ–∫–∏)
class InvoiceItem(Base):
    __tablename__ = "invoice_items"

    id: Mapped[int] = mapped_column(primary_key=True)
    invoice_id: Mapped[int] = mapped_column(ForeignKey("invoices.id"))

    # –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–¥–∞–≤—Ü—É (—Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–ø–∏—Å–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π)
    seller_id: Mapped[int] = mapped_column(ForeignKey("sellers.id"), nullable=True, index=True)
    seller_name: Mapped[Optional[str]] = mapped_column(String(120), nullable=True)

    # üÜï –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
    product_id: Mapped[Optional[int]] = mapped_column(ForeignKey("products.id"), nullable=True, index=True)

    # –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É
    variant_id: Mapped[Optional[int]] = mapped_column(ForeignKey("variants.id"), nullable=True)
    product_name: Mapped[str] = mapped_column(String(255))
    variant_name: Mapped[str] = mapped_column(String(120))

    # –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π), –Ω–∞–ø—Ä–∏–º–µ—Ä "milk.jpeg"
    product_image: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)

    qty_original: Mapped[int] = mapped_column(Integer)
    qty_final: Mapped[int] = mapped_column(Integer)

    unit_price_original: Mapped[Decimal] = mapped_column(Numeric(12, 2))
    unit_price_final: Mapped[Decimal] = mapped_column(Numeric(12, 2))

    line_total_original: Mapped[Decimal] = mapped_column(Numeric(12, 2))
    line_total_final: Mapped[Decimal] = mapped_column(Numeric(12, 2))

    invoice: Mapped["Invoice"] = relationship("Invoice", back_populates="items")

    # –•–µ–ª–ø–µ—Ä: –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —Å—Ç—Ä–æ–∫–∏
    def recompute_line(self):
        self.line_total_final = Decimal(str(self.unit_price_final)) * int(self.qty_final)




# –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
Index("ix_invoices_customer_phone", Invoice.customer_name, Invoice.phone)
