from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import RedirectResponse
from fastapi import Request
from app.utils.enums import UserRole


ACCESS_MATRIX = {
    UserRole.ADMIN.value: ["*"],  # –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    UserRole.SELLER.value: ["/admin/dashboard", "/admin/products", "/admin/invoices"],
    UserRole.PICKER.value: ["/admin/dashboard", "/admin/orders/live"],
}


class RBACMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        path = request.url.path

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—ã –∞–¥–º–∏–Ω–∫–∏ (–∫—Ä–æ–º–µ –ª–æ–≥–∏–Ω–∞/–ª–æ–≥–∞—É—Ç–∞)
        if path.startswith("/admin") and path not in ["/login", "/logout"]:
            role = (request.session.get("role") or "").strip().lower()

            if not role:
                return RedirectResponse("/login")

            # üîπ –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Üí –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
            if role == UserRole.ADMIN.value:
                return await call_next(request)

            # üîπ –µ—Å–ª–∏ —É —Ä–æ–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            allowed_paths = ACCESS_MATRIX.get(role, [])
            if "*" in allowed_paths or any(path.startswith(p) for p in allowed_paths):
                return await call_next(request)

            # üîπ –∏–Ω–∞—á–µ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞–∑–∞–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            referer = request.headers.get("referer") or "/"
            request.session["flash"] = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
            return RedirectResponse(referer)

        return await call_next(request)
