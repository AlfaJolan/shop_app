import time
from fastapi import APIRouter, Request, Form, Depends
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from app.db import SessionLocal
from app.models.user import User
from app.utils.security import verify_password

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")

# üîπ Rate limit config
MAX_ATTEMPTS = 5          # –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
BLOCK_TIME = 60           # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
login_attempts = {}       # { "ip": {"count": int, "last": timestamp} }


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def check_rate_limit(ip: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ IP"""
    now = time.time()
    data = login_attempts.get(ip)

    if not data:
        return True

    # –µ—Å–ª–∏ –µ—â—ë –∏–¥—ë—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if data["count"] >= MAX_ATTEMPTS and now - data["last"] < BLOCK_TIME:
        return False

    return True


def add_attempt(ip: str):
    """–ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
    now = time.time()
    if ip not in login_attempts:
        login_attempts[ip] = {"count": 1, "last": now}
    else:
        attempts = login_attempts[ip]
        if now - attempts["last"] > BLOCK_TIME:
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            login_attempts[ip] = {"count": 1, "last": now}
        else:
            attempts["count"] += 1
            attempts["last"] = now


def reset_attempts(ip: str):
    """–°–±—Ä–æ—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    if ip in login_attempts:
        del login_attempts[ip]


# —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
@router.get("/login")
def login_page(request: Request):
    return templates.TemplateResponse("auth/login.html", {"request": request})


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
@router.post("/login")
def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db),
):
    client_ip = request.client.host

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(client_ip):
        return templates.TemplateResponse(
            "auth/login.html",
            {"request": request, "error": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É."},
        )

    user = db.query(User).filter(User.username == username).first()
    if not user or not verify_password(password, user.password_hash):
        add_attempt(client_ip)  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        return templates.TemplateResponse(
            "auth/login.html",
            {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"},
        )

    # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ ‚Äî —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞
    reset_attempts(client_ip)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
    request.session["user_id"] = user.id
    role_clean = (user.role or "").strip().lower()
    request.session["role"] = role_clean
    print("üîë LOGIN SUCCESS:", user.username, "role=", role_clean)




    return RedirectResponse("/admin/dashboard", status_code=303)


# –≤—ã—Ö–æ–¥
@router.get("/logout")
def logout(request: Request):
    request.session.clear()
    return RedirectResponse("/", status_code=303)
@router.get("/whoami")
def whoami(request: Request):
    return {"user_id": request.session.get("user_id"), "role": request.session.get("role")}

