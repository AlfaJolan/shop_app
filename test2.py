# scripts/reset_and_seed.py
from app.db import Base, engine, SessionLocal
import random
import app.models  # –≤–∞–∂–Ω–æ: –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
from sqlalchemy.orm import configure_mappers
from decimal import Decimal
from app.models.catalog import Seller, Category, Product, Variant

def run_seed():
      # === RESET ===
    Base.metadata.drop_all(bind=engine)
    print("üóë –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")

    configure_mappers()
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")

    db = SessionLocal()
    try:
        # --- 1. –ü—Ä–æ–¥–∞–≤–µ—Ü ---
        seller = Seller(name="–ú–∞–≥–∞–∑–∏–Ω ‚Ññ1", city="–ê–ª–º–∞—Ç—ã")
        db.add(seller)
        db.commit()
        db.refresh(seller)
        print(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–∑–¥–∞–Ω: {seller.name}")

        # --- 2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫) ---
        category_names = [
            "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ú–æ–ª–æ—á–Ω—ã–µ", "–ù–∞–ø–∏—Ç–∫–∏", "–ö—Ä—É–ø—ã", "–ë–∞–∫–∞–ª–µ—è",
            "–°–ª–∞–¥–æ—Å—Ç–∏", "–û–≤–æ—â–∏", "–§—Ä—É–∫—Ç—ã"
        ]
        categories = []
        for i, nm in enumerate(category_names, start=1):
            category = Category(name=nm, slug=f"cat-{i}")  # –ø—Ä–æ—Å—Ç–æ–π slug, –±–µ–∑ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–∞
            db.add(category)
            db.commit()
            db.refresh(category)
            categories.append(category)
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category.name}")

        # --- 3. –ù–∞–±–æ—Ä—ã –∏–º—ë–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ---
        product_bases = [
            "–ú–æ–ª–æ–∫–æ", "–°–∞—Ö–∞—Ä", "–°–æ–ª—å", "–ú—É–∫–∞", "–†–∏—Å", "–ì—Ä–µ—á–∫–∞", "–Ø–π—Ü–∞",
            "–°—ã—Ä", "–ö–æ–ª–±–∞—Å–∞", "–ô–æ–≥—É—Ä—Ç", "–°–º–µ—Ç–∞–Ω–∞", "–¢–≤–æ—Ä–æ–≥", "–ú–∞—Å–ª–æ",
            "–ö–µ—Ñ–∏—Ä", "–ö–æ—Ñ–µ", "–ß–∞–π", "–í–æ–¥–∞", "–°–æ–∫", "–ü–µ—á–µ–Ω—å–µ", "–®–æ–∫–æ–ª–∞–¥",
            "–ß–∏–ø—Å—ã", "–ö—É–∫—É—Ä—É–∑–∞ –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ì–æ—Ä–æ—à–µ–∫ –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "–¢—É–Ω–µ—Ü", "–°–∞—Ä–¥–∏–Ω–∞"
        ]
        adjectives = ["–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–µ", "—Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–µ", "–æ—Ç–±–æ—Ä–Ω–æ–µ", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ", "—É–ª—å—Ç—Ä–∞", "–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ"]
        units = ["—à—Ç", "–∫–≥", "–ª", "—É–ø–∞–∫."]

        variant_weights = ["300 –≥", "400 –≥", "450 –≥", "500 –≥", "700 –≥", "900 –≥", "1 –∫–≥", "2 –∫–≥"]
        variant_volumes = ["0.33 –ª", "0.5 –ª", "0.9 –ª", "1 –ª", "1.5 –ª", "2 –ª"]
        variant_fat = ["1%", "2.5%", "3.2%", "5%"]
        variant_packs = ["—É–ø–∞–∫–æ–≤–∫–∞ 4 —à—Ç", "—É–ø–∞–∫–æ–≤–∫–∞ 6 —à—Ç", "—É–ø–∞–∫–æ–≤–∫–∞ 12 —à—Ç"]

        def random_price():
            return Decimal(f"{random.uniform(150, 4000):.2f}")

        def random_stock():
            # –∏–Ω–æ–≥–¥–∞ 0, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ¬´–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏¬ª
            return random.choice([0] + [random.randint(1, 120) for _ in range(9)])

        def make_product_name():
            base = random.choice(product_bases)
            if random.random() < 0.5:
                base = f"{base} {random.choice(adjectives)}"
            # –ß—É—Ç—å-—á—É—Ç—å ¬´–ª–æ–º–∞–µ–º¬ª —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if random.random() < 0.2:
                base = "".join(ch.upper() if i % 2 else ch.lower() for i, ch in enumerate(base))
            return base

        def pick_variant_name(prod_name: str):
            pool = variant_weights + variant_volumes + variant_packs
            if any(x in prod_name.lower() for x in ["–º–æ–ª–æ–∫–æ", "–π–æ–≥—É—Ä—Ç", "–∫–µ—Ñ–∏—Ä", "—Å–º–µ—Ç–∞–Ω–∞"]):
                pool = pool + variant_fat
            return random.choice(pool)

        # --- 4. –¢–æ–≤–∞—Ä—ã + –í–∞—Ä–∏–∞–Ω—Ç—ã ---
        # –°–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Ö–æ—Ç–∏–º –Ω–∞–≥–µ–Ω–µ—Ä–∏—Ç—å (–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å)
        TOTAL_PRODUCTS = 120
        # –°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä (–º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º)
        MIN_VARIANTS = 2
        MAX_VARIANTS = 5

        for idx in range(1, TOTAL_PRODUCTS + 1):
            # –¢–æ–≤–∞—Ä
            p = Product(
                name=make_product_name(),
                sku=f"SKU{idx:05d}",
                unit=random.choice(units),
                image=None,          # –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
                is_active=True,
                category_id=random.choice(categories).id,
                seller_id=seller.id,
            )
            db.add(p)
            db.flush()  # —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è p.id
            print(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: {p.name}")

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            used_names = set()
            variants_to_add = random.randint(MIN_VARIANTS, MAX_VARIANTS)
            for _ in range(variants_to_add):
                vn = pick_variant_name(p.name)
                # –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                tries = 0
                while vn in used_names and tries < 5:
                    vn = pick_variant_name(p.name)
                    tries += 1
                used_names.add(vn)

                v = Variant(
                    product_id=p.id,
                    name=vn,
                    pack_size=1,
                    unit_price=random_price(),
                    stock=random_stock(),
                    is_active=True,
                )
                db.add(v)

            db.commit()
            print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        print("üéâ –ì–æ—Ç–æ–≤–æ: –ë–î –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.")

    finally:
        db.close()

if __name__ == "__main__":
    run_seed()
