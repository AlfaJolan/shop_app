import requests
import time
import threading
from sqlalchemy.orm import Session
from app.db import SessionLocal
from app.telegram.config_notify import notify_settings
from app.models.subscriber import Subscriber

API_URL = f"https://api.telegram.org/bot{notify_settings.TELEGRAM_TOKEN}/"


def save_chat(chat_id: str, username: str | None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –ë–î (—á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å)"""
    db: Session = SessionLocal()
    try:
        exists = db.query(Subscriber).filter(Subscriber.chat_id == str(chat_id)).first()
        if not exists:
            sub = Subscriber(chat_id=str(chat_id), username=username)
            db.add(sub)
            db.commit()
    except Exception as e:
        db.rollback()
        print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:", e)
    finally:
        db.close()


def get_updates(offset=None):
    """–ü–æ–ª—É—á–∞–µ–º –∞–ø–¥–µ–π—Ç—ã –æ—Ç Telegram"""
    url = API_URL + "getUpdates"
    params = {"timeout": 30, "offset": offset}
    return requests.get(url, params=params).json()


def polling_loop():
    #print("Polling –∑–∞–ø—É—â–µ–Ω...")

    """–¶–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    last_update_id = None
    while True:
        try:
            updates = get_updates(last_update_id).get("result", [])
            #print("–ê–ø–¥–µ–π—Ç—ã:", updates)   # üëà

            for upd in updates:
                last_update_id = upd["update_id"] + 1
                msg = upd.get("message", {})
                text = msg.get("text")
                chat = msg.get("chat", {})
                chat_id = chat.get("id")
                username = chat.get("username")

                if text == notify_settings.TELEGRAM_ADMIN_PASSWORD:
                    save_chat(chat_id, username)
                    requests.post(API_URL + "sendMessage", data={
                        "chat_id": chat_id,
                        "text": "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
                    })
                else:
                    requests.post(API_URL + "sendMessage", data={
                        "chat_id": chat_id,
                        "text": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
                    })
        except Exception as e:
            print("–û—à–∏–±–∫–∞ polling:", e)
        time.sleep(2)


def start_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ"""
    threading.Thread(target=polling_loop, daemon=True).start()
