отлично, вот сжатый отчёт и план дальше — без воды.

# Что уже сделано

* **Проект на FastAPI + Jinja2 + SQLite**: базовая структура, запуск через `uvicorn`.
* **Каталог**: карточки с вариантами, картинки, адаптивная сетка 2-4 колонки, поиск по названию.
* **Корзина (сессии)**: добавление/изменение/удаление позиций, авто-проверка остатков на складе при каждом действии и на чекауте, корректировка количества при нехватке.
* **Заказ (Order/OrderItem)**: создание из корзины, списание складских остатков, страница “Заказ принят” с табличным составом.
* **Накладная (Invoice/InvoiceItem)**:

  * генерация из заказа, публичная ссылка с `pkey` (подписанный токен, доступ только по ссылке),
  * страница просмотра накладной (HTML) с колонками: Наименование → Фото → Вариант → Кол-во → Цена → Сумма,
  * **экспорт PDF/XLSX** без хранения на диске (генерация “на лету”), с миниатюрами товара, кириллицей и корректным форматированием,
  * валюта в экспортах — `KZT` (чтобы не было «квадратиков»),
  * имена файлов экспорта: `nakladnaya_{Имя}_{Телефон}_{YYYY-MM-DD}.pdf|xlsx`.
* **UI-мелочи**: флэш-уведомления, кнопка перехода в корзину, адаптивность.

# Что осталось (по вашему ТЗ) — план по спринтам

## Спринт 1 — Админ-редактор накладной

**Цель:** админ может менять количество/цену строк, видеть зачёркнутые “оригинал → итог”, суммы пересчитываются автоматически.

* [ ] Админ-страница редактирования накладной: форма по позициям (`qty_final`, `unit_price_final`) + пересчёт `line_total_final`/`total_amount_final`.
* [ ] Поля в модели уже учтены (`*_original`, `*_final`) — остаётся CRUD и валидация.
* [ ] **Аудит-лог**: кто/когда менял цену/кол-во (таблица `invoice_audit`: invoice\_id, item\_id, old→new, user, timestamp).
* [ ] Переиспользовать тот же шаблон в HTML/PDF/XLSX (показывать зачёркнутые original и жирный final — уже сделано в HTML; добавить в PDF/XLSX при наличии различий).
* [ ] Кнопки: “Сохранить”, “Отменить изменения строки”, “Пересчитать”.

## Спринт 2 — Журнал оплат (опционально «если легко» вы хотели)

**Цель:** внизу накладной список платежей.

* [ ] Модель `invoice_payments` (id, invoice\_id, date, method, amount, note).
* [ ] UI в админке: добавить/удалить платеж.
* [ ] Блок в HTML/PDF/XLSX: “Оплаты” (дата, способ, сумма) и “Итого оплачено / Остаток к оплате”.

## Спринт 3 — Публичные ссылки: ротация/отзыв

**Цель:** управлять `pkey`.

* [ ] Кнопки в админке: “Сгенерировать новый pkey” (ротация), “Отозвать” (is\_revoked=true).
* [ ] Логика доступа уже есть — дописать UI и эндпоинты.
* [ ] Быстрые действия: скопировать ссылку, открыть PDF/XLSX.

## Спринт 4 — Админ-каталог и склад

**Цель:** управлять товарами и остатками из UI.

* [ ] CRUD Категории/Товары/Варианты (название, SKU, единицы, цена, `stock`, активность).
* [ ] **Загрузка изображений** (form-upload): сохранить в `app/static/images` и путь в БД.
* [ ] Импорт из Excel (как у вас в Flask) — парсить и обновлять товары/остатки.
* [ ] Аудит складских изменений (кто/когда, причина).

## Спринт 5 — Поиск и фильтры

**Цель:** быстрее находить товар.

* [ ] Для SQLite: **FTS5** (полнотекстовый поиск) по name/sku + индексы по category\_id/active.
* [ ] (Позже, когда переедем на PostgreSQL) — tsvector на name/категориях.

## Спринт 6 — Интеграция с Telegram-ботом

**Цель:** нотификации и быстрые ссылки.

* [ ] Отправка в Telegram: “Создан заказ …”, “Создана накладная …” + ссылка `pkey`.
* [ ] (Опционально) Команды админа: узнать статусы/остатки, получить PDF накладной.

## Спринт 7 — Безопасность и роли

**Цель:** базовая защита и роли.

* [ ] Авторизация админов: логин, хэш пароля (bcrypt), роли (admin/manager/viewer).
* [ ] Ограничение доступов по ролям (редактирование накладных только админам).
* [ ] Валидация форм/инпутов, лимиты на файлы, базовые rate-limit на публичные эндпоинты.
* [ ] CSRF для форм (для авторизованной админки).

## Спринт 8 — Публичные мелочи

**Цель:** завершить витрину.

* [ ] Категории/фильтры на главной (по категориям/цене).
* [ ] Плавающие кнопки WhatsApp/Telegram (указанные номера/ссылки).
* [ ] “Просмотр корзины” в шапке (иконка + количество).
* [ ] Локализация (RU/KZ по необходимости).

## Спринт 9 — Деплой

**Цель:** выкатить на домен.

* [ ] Docker-сборка (uvicorn + app).
* [ ] Nginx: статика, обратный прокси на uvicorn, gzip, HTTPS (Let’s Encrypt).
* [ ] Переменные окружения (.env): SECRET\_KEY, BASE\_URL, TELEGRAM\_TOKEN, и т.д.
* [ ] Yandex Cloud VM: systemd сервис для uvicorn, резервное копирование БД.
* [ ] Мониторинг логов и ротация.

## Спринт 10 — Качество и поддержка

**Цель:** устойчивость и прозрачность.

* [ ] Alembic (миграции) — когда перейдём на PostgreSQL (сейчас SQLite и `create_all`).
* [ ] Логи/метрики (структурированные логи, базовые метрики).
* [ ] Тесты: минимум — на расчёт сумм и вычитание остатков; smoke-тест PDF/XLSX.

---

## Ближайшие «быстрые» шаги (рекомендую)

1. **Админ-редактор накладной** (спринт 1): UI + пересчёт + аудит.
2. **Ротация/отзыв `pkey`** (спринт 3), чтобы можно было безопасно делиться ссылкой.
3. **Журнал оплат** (спринт 2) — если планируете принимать частичные оплаты.

Хочешь — начнём прямо с админ-редактора накладной: дам модели/роуты/шаблон, который показывает строки, позволяет редактировать `qty_final`/`unit_price_final`, делает пересчёт и пишет запись в `invoice_audit`.
