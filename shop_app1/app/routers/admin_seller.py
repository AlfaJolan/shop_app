from fastapi import APIRouter, Request, Form, Depends, HTTPException
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from app.db import SessionLocal
from app.models import Seller  # üÜï –º–æ–¥–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞

router = APIRouter(prefix="/admin/sellers", tags=["admin-sellers"])
templates = Jinja2Templates(directory="app/templates")


# ---- DB ----
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# üì¶ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@router.get("/")
def sellers_index(request: Request, db: Session = Depends(get_db)):
    sellers = db.query(Seller).all()
    return templates.TemplateResponse("admin/sellers_index.html", {
        "request": request,
        "sellers": sellers,
    })


# üÜï —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
@router.get("/new")
def seller_new(request: Request):
    return templates.TemplateResponse("admin/seller_form.html", {
        "request": request,
        "seller": None,
    })


# üíæ —Å–æ–∑–¥–∞–Ω–∏–µ
@router.post("/create")
def seller_create(
    name: str = Form(...),
    city: str = Form(None),
    db: Session = Depends(get_db),
):
    seller = Seller(name=name, city=city)
    db.add(seller)
    db.commit()
    return RedirectResponse("/admin/sellers", status_code=303)


# ‚úèÔ∏è —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.get("/{seller_id}/edit")
def seller_edit(seller_id: int, request: Request, db: Session = Depends(get_db)):
    seller = db.query(Seller).get(seller_id)
    if not seller:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return templates.TemplateResponse("admin/seller_form.html", {
        "request": request,
        "seller": seller,
    })


# üîÑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
@router.post("/{seller_id}/update")
def seller_update(
    seller_id: int,
    name: str = Form(...),
    city: str = Form(None),
    db: Session = Depends(get_db),
):
    seller = db.query(Seller).get(seller_id)
    if not seller:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")

    seller.name = name
    seller.city = city
    db.commit()
    return RedirectResponse("/admin/sellers", status_code=303)


# üóë —É–¥–∞–ª–µ–Ω–∏–µ
@router.post("/{seller_id}/delete")
def seller_delete(seller_id: int, db: Session = Depends(get_db)):
    seller = db.query(Seller).get(seller_id)
    if not seller:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")

    db.delete(seller)
    db.commit()
    return RedirectResponse("/admin/sellers", status_code=303)
