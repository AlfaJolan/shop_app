# app/routers/admin_invoice.py
from decimal import Decimal, InvalidOperation
from typing import Optional, List

from fastapi import APIRouter, Request, Depends, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from app.db import get_db
from app.models.invoice import Invoice, InvoiceItem
from app.models.invoice_audit import InvoiceAudit  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ app/models/__init__.py
from app.models.catalog import Variant  # üîπ –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–æ–º

templates = Jinja2Templates(directory="app/templates")

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
router = APIRouter(prefix="/admin/invoices", tags=["admin-invoices"])


def _dec(val: str, default: Decimal) -> Decimal:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø—è—Ç–æ–π."""
    if val is None:
        return default
    val = val.replace(",", ".").strip()
    try:
        return Decimal(val)
    except (InvalidOperation, ValueError):
        return default


@router.get("/{invoice_id}", response_class=HTMLResponse)
def invoice_short(invoice_id: int, request: Request, db: Session = Depends(get_db)):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—É—Ç–∏ /admin/invoices/{id} ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /edit.
    –ß—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 404, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ø–∏—Å–∞–ª '/edit'.
    """
    inv: Optional[Invoice] = db.query(Invoice).get(invoice_id)
    if not inv:
        raise HTTPException(status_code=404, detail="–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return RedirectResponse(url=f"/admin/invoices/{invoice_id}/edit", status_code=303)


@router.get("/{invoice_id}/edit", response_class=HTMLResponse)
def edit_invoice(request: Request, invoice_id: int, db: Session = Depends(get_db)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π:
    - –∏–∑–º–µ–Ω–µ–Ω–∏–µ qty_final –∏ unit_price_final –ø–æ –ø–æ–∑–∏—Ü–∏—è–º,
    - –ø–æ–∫–∞–∑ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ original ‚Üí –∂–∏—Ä–Ω–æ–≥–æ final,
    - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç —Å—É–º–º.
    """
    inv: Optional[Invoice] = db.query(Invoice).get(invoice_id)
    if not inv:
        raise HTTPException(status_code=404, detail="–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return templates.TemplateResponse("admin/invoice_edit.html", {
        "request": request,
        "inv": inv,
        "items": inv.items,
    })


@router.post("/{invoice_id}/update", response_class=HTMLResponse)
async def update_invoice(request: Request, invoice_id: int, db: Session = Depends(get_db)):
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
    - —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã,
    - –ø–∏—à–µ–º –∞—É–¥–∏—Ç (–∫—Ç–æ/—á—Ç–æ/—Å –∫–∞–∫–æ–≥–æ –Ω–∞ –∫–∞–∫–æ–µ),
    - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã —Å—Ç—Ä–æ–∫ –∏ –∏—Ç–æ–≥ –Ω–∞–∫–ª–∞–¥–Ω–æ–π,
    - üîπ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ (Variant.stock),
    - üîπ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä—è–º–æ –≤ —Ñ–æ—Ä–º–µ.
    """
    inv: Optional[Invoice] = db.query(Invoice).get(invoice_id)
    if not inv:
        raise HTTPException(status_code=404, detail="–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    form = await request.form()
    audits: List[InvoiceAudit] = []
    changed = False

    for it in inv.items:
        qty_key = f"qty_final_{it.id}"
        price_key = f"unit_price_final_{it.id}"

        qty_val = form.get(qty_key, None)
        price_val = form.get(price_key, None)

        new_qty = it.qty_final
        new_price = it.unit_price_final

        # qty_final
        if qty_val is not None:
            try:
                v = int(qty_val)
                if v < 0:
                    v = 0
                new_qty = v
            except ValueError:
                pass

        # unit_price_final
        if price_val is not None:
            v = _dec(price_val, it.unit_price_final)
            if v < 0:
                v = Decimal("0")
            new_price = v

        # –∞—É–¥–∏—Ç qty + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞
        if int(new_qty) != int(it.qty_final):
            delta = new_qty - it.qty_final  # —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

            # üîπ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å variant_id
            if not getattr(it, "variant_id", None):
                return templates.TemplateResponse(
                    "admin/invoice_edit.html",
                    {
                        "request": request,
                        "inv": inv,
                        "items": inv.items,
                        "error": f"–û—à–∏–±–∫–∞: —É –ø–æ–∑–∏—Ü–∏–∏ '{it.product_name}' –Ω–µ—Ç variant_id, –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥."
                    }
                )

            variant = db.query(Variant).get(it.variant_id)
            if not variant:
                return templates.TemplateResponse(
                    "admin/invoice_edit.html",
                    {
                        "request": request,
                        "inv": inv,
                        "items": inv.items,
                        "error": f"–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è '{it.product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    }
                )

            # üîπ –µ—Å–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥
            if delta > 0 and variant.stock < delta:
                return templates.TemplateResponse(
                    "admin/invoice_edit.html",
                    {
                        "request": request,
                        "inv": inv,
                        "items": inv.items,
                        "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ '{variant.name}'. –ù–∞ —Å–∫–ª–∞–¥–µ {variant.stock}, —Ç—Ä–µ–±—É–µ—Ç—Å—è +{delta}."
                    }
                )

            # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            variant.stock -= delta

            # –∞—É–¥–∏—Ç qty
            audits.append(InvoiceAudit(
                invoice_id=inv.id,
                item_id=it.id,
                field="qty",
                old_value=Decimal(str(it.qty_final)),
                new_value=Decimal(str(new_qty)),
                user="admin",
            ))
            it.qty_final = int(new_qty)
            changed = True

        # –∞—É–¥–∏—Ç —Ü–µ–Ω—ã
        if Decimal(str(new_price)) != Decimal(str(it.unit_price_final)):
            audits.append(InvoiceAudit(
                invoice_id=inv.id,
                item_id=it.id,
                field="price",
                old_value=Decimal(str(it.unit_price_final)),
                new_value=Decimal(str(new_price)),
                user="admin",
            ))
            it.unit_price_final = new_price
            changed = True

        # –ø–µ—Ä–µ—Å—á—ë—Ç —Å—É–º–º—ã —Å—Ç—Ä–æ–∫–∏
        it.recompute_line()

    # –ø–µ—Ä–µ—Å—á—ë—Ç –∏—Ç–æ–≥–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    inv.recompute_totals()

    if changed and audits:
        for a in audits:
            db.add(a)

    db.commit()
    return RedirectResponse(url=f"/admin/invoices/{inv.id}/edit", status_code=303)


@router.post("/{invoice_id}/reset-item/{item_id}")
def reset_item(invoice_id: int, item_id: int, db: Session = Depends(get_db)):
    """
    –°–±—Ä–æ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º qty/price (–∏ –∞—É–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π).
    üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –Ω–∞ Variant.stock).
    """
    inv: Optional[Invoice] = db.query(Invoice).get(invoice_id)
    if not inv:
        raise HTTPException(status_code=404, detail="–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    it: Optional[InvoiceItem] = db.query(InvoiceItem).get(item_id)
    if not it or it.invoice_id != inv.id:
        raise HTTPException(status_code=404, detail="–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –∞—É–¥–∏—Ç qty
    if int(it.qty_final) != int(it.qty_original):
        db.add(InvoiceAudit(
            invoice_id=inv.id,
            item_id=it.id,
            field="qty",
            old_value=Decimal(str(it.qty_final)),
            new_value=Decimal(str(it.qty_original)),
            user="admin",
        ))
    # –∞—É–¥–∏—Ç price
    if Decimal(str(it.unit_price_final)) != Decimal(str(it.unit_price_original)):
        db.add(InvoiceAudit(
            invoice_id=inv.id,
            item_id=it.id,
            field="price",
            old_value=Decimal(str(it.unit_price_final)),
            new_value=Decimal(str(it.unit_price_original)),
            user="admin",
        ))

    # üîπ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
    delta = it.qty_original - it.qty_final
    if getattr(it, "variant_id", None):
        variant = db.query(Variant).get(it.variant_id)
        if variant:
            variant.stock += delta

    # —Å–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π
    it.qty_final = it.qty_original
    it.unit_price_final = it.unit_price_original
    it.recompute_line()

    # –ø–µ—Ä–µ—Å—á—ë—Ç –∏—Ç–æ–≥–∞
    inv.recompute_totals()
    db.commit()

    return RedirectResponse(url=f"/admin/invoices/{inv.id}/edit", status_code=303)
